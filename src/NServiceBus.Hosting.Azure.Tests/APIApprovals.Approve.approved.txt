[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.Hosting.Azure.HostProcess, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.Hosting.Azure.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.5.2", FrameworkDisplayName=".NET Framework 4.5.2")]
namespace NServiceBus
{
    [System.ObsoleteAttribute("Use `IConfigureThisHost` instead. Will be removed in version 8.0.0.", true)]
    public interface AsA_Host { }
    public interface AsA_Worker { }
    public class static ConfigureAzureIntegration
    {
        public static void AzureConfigurationSource(this NServiceBus.EndpointConfiguration config, string configurationPrefix = null) { }
    }
    public class Development : NServiceBus.IProfile
    {
        public Development() { }
    }
    public class static EndpointConfigurationExtensions
    {
        public static void RunWhenEndpointStartsAndStops(this NServiceBus.EndpointConfiguration configuration, NServiceBus.IWantToRunWhenEndpointStartsAndStops startableAndStoppable) { }
    }
    public class HostingSettings
    {
        public HostingSettings(string connectionString) { }
        public bool AutoUpdate { get; set; }
        public string Container { get; set; }
        public string LocalResource { get; set; }
        public bool RecycleRoleOnError { get; set; }
        public Microsoft.WindowsAzure.Storage.CloudStorageAccount StorageAccount { get; }
        public int TimeToWaitUntilProcessIsKilled { get; set; }
        public int UpdateInterval { get; set; }
    }
    public interface IConfigureLogging
    {
        void Configure(NServiceBus.IConfigureThisEndpoint specifier);
    }
    public interface IConfigureLoggingForProfile<T> : NServiceBus.IConfigureLogging
        where T : NServiceBus.IProfile { }
    public interface IConfigureThisEndpoint
    {
        void Customize(NServiceBus.EndpointConfiguration configuration);
    }
    public interface IConfigureThisHost
    {
        NServiceBus.HostingSettings Configure();
    }
    public interface IHandleAnyProfile : NServiceBus.IHandleProfile, NServiceBus.IHandleProfile<NServiceBus.IProfile>, NServiceBus.IWantTheListOfActiveProfiles { }
    public interface IHandleProfile
    {
        void ProfileActivated(NServiceBus.EndpointConfiguration config);
    }
    public interface IHandleProfile<T> : NServiceBus.IHandleProfile
        where T : NServiceBus.IProfile { }
    public interface IProfile { }
    public interface IWantTheListOfActiveProfiles
    {
        System.Collections.Generic.IEnumerable<System.Type> ActiveProfiles { get; set; }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute(JetBrains.Annotations.ImplicitUseTargetFlags.Default | JetBrains.Annotations.ImplicitUseTargetFlags.Itself | JetBrains.Annotations.ImplicitUseTargetFlags.Members | JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers)]
    public interface IWantToRunWhenEndpointStartsAndStops
    {
        System.Threading.Tasks.Task Start(NServiceBus.IMessageSession session);
        System.Threading.Tasks.Task Stop(NServiceBus.IMessageSession session);
    }
    public class NServiceBusRoleEntrypoint
    {
        public NServiceBusRoleEntrypoint() { }
        public void Start() { }
        public void Stop() { }
    }
    public class Production : NServiceBus.IProfile
    {
        public Production() { }
    }
    public interface UsingTransport<T>
        where T : NServiceBus.Transports.TransportDefinition { }
}
namespace NServiceBus.Hosting.Azure
{
    [System.ObsoleteAttribute("The profiles configured via AzureProfileConfig are no longer supported. Will be r" +
        "emoved in version 8.0.0.", true)]
    public class AzureProfileConfig : System.Configuration.ConfigurationSection
    {
        public AzureProfileConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("Profiles", IsRequired=false)]
        public string Profiles { get; set; }
    }
    [System.ObsoleteAttribute("The profiles configured via DynamicHostControllerConfig are no longer supported. " +
        "Use `HostingSettings` instead. Will be removed in version 8.0.0.", true)]
    public class DynamicHostControllerConfig : System.Configuration.ConfigurationSection
    {
        public DynamicHostControllerConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("AutoUpdate", DefaultValue=false, IsRequired=false)]
        public bool AutoUpdate { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("ConnectionString", DefaultValue="UseDevelopmentStorage=true", IsRequired=false)]
        public string ConnectionString { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Container", DefaultValue="endpoints", IsRequired=false)]
        public string Container { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("LocalResource", DefaultValue="endpoints", IsRequired=false)]
        public string LocalResource { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("RecycleRoleOnError", DefaultValue=false, IsRequired=false)]
        public bool RecycleRoleOnError { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("TimeToWaitUntilProcessIsKilled", DefaultValue=10000, IsRequired=false)]
        public int TimeToWaitUntilProcessIsKilled { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("UpdateInterval", DefaultValue=600000, IsRequired=false)]
        public int UpdateInterval { get; set; }
    }
}